From 23276afe270009420cfbc52bffafdd25ac0817fe Mon Sep 17 00:00:00 2001
From: Li Zhou <li.zhou@windriver.com>
Date: Thu, 14 Jan 2016 17:01:29 +0800
Subject: [PATCH 1/3] net-tools: add SCTP support for netstat

Upstream-Status: pending

Signed-off-by: Li Zhou <li.zhou@windriver.com>
---
 netstat.c    | 411 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++--
 statistics.c |  68 +++++++++-
 2 files changed, 465 insertions(+), 14 deletions(-)

Index: net-tools-1.60/netstat.c
===================================================================
--- net-tools-1.60.orig/netstat.c
+++ net-tools-1.60/netstat.c
@@ -58,6 +58,7 @@
  *
  *990420 {1.38} Tuan Hoang              removed a useless assignment from igmp_do_one()
  *20010404 {1.39} Arnaldo Carvalho de Melo - use setlocale
+ *20050516 {1.40} Ivan Skytte Joergensen:Added SCTP support
  *20081201 {1.42} Brian Micek           added -L|--udplite options for RFC 3828
  *20020722 {1.51} Thomas Preusser       added SCTP over IPv4 support
  *
@@ -119,6 +120,28 @@ typedef enum {
     SS_DISCONNECTING		/* in process of disconnecting  */
 } socket_state;
 
+#define SCTP_NSTATES  9         /* The number of states in array*/
+
+static const char *sctp_state[] = {
+    N_("EMPTY"),
+    N_("CLOSED"),
+    N_("COOKIE_WAIT"),
+    N_("COOKIE_ECHOED"),
+    N_("ESTABLISHED"),
+    N_("SHUTDOWN_PENDING"),
+    N_("SHUTDOWN_SENT"),
+    N_("SHUTDOWN_RECEIVED"),
+    N_("SHUTDOWN_ACK_SENT")
+};
+
+#define SCTP_NTYPES 3           /* The number of types in array */
+
+static const char *sctp_type[] = {
+    N_("udp"),
+    N_("udp-high-bw"),
+    N_("tcp")
+};
+
 #define SO_ACCEPTCON    (1<<16)	/* performed a listen           */
 #define SO_WAITDATA     (1<<17)	/* wait data to read            */
 #define SO_NOSPACE      (1<<18)	/* no space to write            */
@@ -995,6 +1019,27 @@ static int igmp_info(void)
 	       igmp_do_one, "igmp", "igmp6");
 }
 
+static const char *sctp_socket_type_str(int type) {
+    if(type>=0 && type<SCTP_NTYPES)
+	return sctp_type[type];
+    else {
+	static char type_str_buf[64];
+	sprintf(type_str_buf,"UNKNOWN(%d)",type);
+	return type_str_buf;
+    }
+}
+
+static const char *sctp_state_str(int state)
+{
+    if(state>=0 && state<SCTP_NSTATES)
+	return sctp_state[state];
+    else {
+	static char state_str_buf[64];
+	sprintf(state_str_buf,"UNKNOWN(%d)",state);
+	return state_str_buf;
+    }
+}
+
 static const char *sctp_socket_state_str(int state)
 {
     if (state >= 0 && state < ARRAY_SIZE(tcp_state))
